name: Convert Scripts

on:
  push:
    paths:
      - 'QuantumultX/**/*.js'
      - 'QuantumultX/**/*.conf'
    branches:
      - main
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          npm install -g typescript ts-node
          npm install --no-package-lock fs-extra @types/fs-extra @types/node

      - name: Create output directories
        run: |
          mkdir -p QuantumultX
          mkdir -p Loon/plugins
          mkdir -p Surge/modules
          mkdir -p scripts

      - name: Setup convert.ts script
        run: |
          wget -q https://gist.githubusercontent.com/raw/your-gist-id/convert.ts -O scripts/convert.ts || {
            # 如果无法从Gist下载，则创建一个基本版本
            cat > scripts/convert.ts << 'EOL'
import * as fs from 'fs-extra';
import * as path from 'path';

// 定义输入和输出目录
const QUANTUMULTX_DIR = 'QuantumultX';
const LOON_OUTPUT_DIR = 'Loon/plugins';
const SURGE_OUTPUT_DIR = 'Surge/modules';

// 定义脚本类型
type ScriptType = {
  fileName: string;      // 原始文件名
  appName?: string;      // 应用名称
  author?: string;       // 作者
  scriptPath?: string;   // 脚本路径
  patterns?: string[];   // URL模式
  hostnames?: string[];  // 主机名
};

/**
 * 获取所有QuantumultX脚本文件
 */
async function getQuantumultXScripts(): Promise<string[]> {
  try {
    const files = await fs.readdir(QUANTUMULTX_DIR);
    return files
      .filter(file => file.endsWith('.js') || file.endsWith('.conf'))
      .map(file => path.join(QUANTUMULTX_DIR, file));
  } catch (err) {
    console.error('Error reading QuantumultX directory:', err);
    return [];
  }
}

/**
 * 从脚本文件中提取关键信息
 */
async function extractScriptInfo(filePath: string): Promise<ScriptType> {
  try {
    const content = await fs.readFile(filePath, 'utf8');
    const fileName = path.basename(filePath).replace(/\.(js|conf)$/, '');
    
    // 提取应用名称
    let appName = fileName; // 默认使用文件名
    const appNameMatch = content.match(/📜\s*✨\s*([^✨]+)\s*✨/);
    if (appNameMatch && appNameMatch[1]) {
      appName = appNameMatch[1].trim();
    }
    
    // 默认作者
    const author = '🅜ⓘ🅚ⓔ🅟ⓗ🅘ⓔ';
    
    // 提取URL模式
    const patterns: string[] = [];
    
    // 从QX格式提取
    const qxMatch = content.match(/\[rewrite_local\].*?\n(.*?)\s+url\s+script-response-body/s);
    if (qxMatch && qxMatch[1] && !patterns.includes(qxMatch[1].trim())) {
      patterns.push(qxMatch[1].trim());
    }
    
    // 提取脚本路径
    let scriptPath = '';
    const scriptPathMatch = content.match(/script-(?:path|response-body)\s+(https:\/\/[^\s,]+)/i);
    if (scriptPathMatch && scriptPathMatch[1]) {
      scriptPath = scriptPathMatch[1];
    }
    
    // 提取MITM主机名
    const hostnames: string[] = [];
    const hostnameMatch = content.match(/hostname\s*=\s*([^\s]+)/);
    if (hostnameMatch && hostnameMatch[1]) {
      hostnames.push(hostnameMatch[1]);
    }
    
    console.log(`提取信息: ${appName}, 模式: ${patterns.join(',')}, 主机名: ${hostnames.join(',')}`);
    
    return {
      fileName,
      appName,
      author,
      scriptPath,
      patterns,
      hostnames
    };
  } catch (err) {
    console.error(`Error extracting info from ${filePath}:`, err);
    throw err;
  }
}

/**
 * 生成Loon插件
 */
function generateLoonPlugin(scriptInfo: ScriptType): string {
  const { appName, author, scriptPath, patterns, hostnames } = scriptInfo;
  const iconName = appName ? appName.toLowerCase().replace(/\s+/g, '') : scriptInfo.fileName.toLowerCase();
  const tagName = iconName;
  
  let loonConfig = `#!name = ${appName} 🔐APP\n`;
  loonConfig += `#!desc = 插件\n`;
  loonConfig += `#!author = ${author}\n`;
  loonConfig += `#!icon = https://raw.githubusercontent.com/Mikephie/icons/main/icon/${iconName}.png\n`;
  loonConfig += `#appCategory = select,"✅签到","🚫广告","🔐APP","🛠️工具"\n\n`;
  
  if (patterns && patterns.length > 0 && scriptPath) {
    loonConfig += `[Script]\n`;
    loonConfig += `http-response ${patterns[0]} script-path=${scriptPath}, requires-body=true, timeout=60, tag=${tagName}\n\n`;
  }
  
  if (hostnames && hostnames.length > 0) {
    loonConfig += `[MITM]\n`;
    loonConfig += `hostname = ${hostnames.join(', ')}\n`;
  }
  
  return loonConfig;
}

/**
 * 生成Surge模块
 */
function generateSurgeModule(scriptInfo: ScriptType): string {
  const { appName, author, scriptPath, patterns, hostnames } = scriptInfo;
  const iconName = appName ? appName.toLowerCase().replace(/\s+/g, '') : scriptInfo.fileName.toLowerCase();
  
  let surgeConfig = `#!name = ${appName} 🔐APP\n`;
  surgeConfig += `#!desc = 网页游览 - 模块\n`;
  surgeConfig += `#!author = ${author}\n`;
  surgeConfig += `#!category=🔐APP\n`;
  surgeConfig += `#!icon = https://raw.githubusercontent.com/Mikephie/icons/main/icon/${iconName}.png\n\n`;
  
  if (patterns && patterns.length > 0 && scriptPath) {
    surgeConfig += `[Script]\n`;
    surgeConfig += `${appName} = type=http-response, pattern=${patterns[0]}, script-path=${scriptPath}, requires-body=true, max-size=-1, timeout=60\n\n`;
  }
  
  if (hostnames && hostnames.length > 0) {
    surgeConfig += `[MITM]\n`;
    surgeConfig += `hostname = %APPEND% ${hostnames.join(', ')}\n`;
  }
  
  return surgeConfig;
}

/**
 * 保存配置到文件
 */
async function saveConfig(
  outputDir: string, 
  fileName: string, 
  content: string,
  extension: string
): Promise<boolean> {
  try {
    await fs.ensureDir(outputDir);
    const outputPath = path.join(outputDir, `${fileName}${extension}`);
    
    // 检查文件是否已存在
    let fileChanged = true;
    try {
      const existingContent = await fs.readFile(outputPath, 'utf8');
      // 如果内容完全相同，不需要重写
      if (existingContent === content) {
        console.log(`File ${outputPath} already exists with identical content, skipping`);
        fileChanged = false;
      }
    } catch (err) {
      // 文件不存在，需要创建
      console.log(`File ${outputPath} does not exist, creating new file`);
    }
    
    // 只有当文件不存在或内容变化时才写入
    if (fileChanged) {
      await fs.writeFile(outputPath, content, 'utf8');
      console.log(`Successfully saved to ${outputPath}`);
    }
    
    return fileChanged;
  } catch (err) {
    console.error(`Error saving file ${fileName}:`, err);
    return false;
  }
}

/**
 * 主函数
 */
async function main() {
  try {
    // 确保输出目录存在
    await fs.ensureDir(LOON_OUTPUT_DIR);
    await fs.ensureDir(SURGE_OUTPUT_DIR);
    
    // 获取所有QX脚本
    const scriptFiles = await getQuantumultXScripts();
    console.log(`找到 ${scriptFiles.length} 个 QuantumultX 脚本`);
    
    let hasChanges = false;
    
    // 处理每个脚本
    for (const filePath of scriptFiles) {
      try {
        console.log(`处理脚本文件: ${filePath}`);
        
        // 提取脚本信息
        const scriptInfo = await extractScriptInfo(filePath);
        
        // 如果没有模式或脚本路径，跳过此文件
        if (!scriptInfo.patterns || scriptInfo.patterns.length === 0 || !scriptInfo.scriptPath) {
          console.warn(`警告: ${filePath} 缺少必要的URL模式或脚本路径，跳过此文件`);
          continue;
        }
        
        // 生成Loon插件
        const loonConfig = generateLoonPlugin(scriptInfo);
        const loonChanged = await saveConfig(
          LOON_OUTPUT_DIR, 
          scriptInfo.fileName, 
          loonConfig, 
          '.plugin'
        );
        
        // 生成Surge模块
        const surgeConfig = generateSurgeModule(scriptInfo);
        const surgeChanged = await saveConfig(
          SURGE_OUTPUT_DIR, 
          scriptInfo.fileName, 
          surgeConfig, 
          '.sgmodule'
        );
        
        // 如果任一文件有变化，记录有更改
        if (loonChanged || surgeChanged) {
          hasChanges = true;
        }
      } catch (err) {
        console.error(`处理 ${filePath} 时出错:`, err);
        // 继续处理下一个文件，不中断整个流程
        continue;
      }
    }
    
    // 设置GitHub Actions输出
    if (hasChanges) {
      console.log('处理完成，有文件变更!');
      if (process.env.GITHUB_OUTPUT) {
        await fs.appendFile(process.env.GITHUB_OUTPUT, 'has_file_changes=true\n');
      }
    } else {
      console.log('处理完成，没有检测到文件变更。');
      if (process.env.GITHUB_OUTPUT) {
        await fs.appendFile(process.env.GITHUB_OUTPUT, 'has_file_changes=false\n');
      }
    }
  } catch (err) {
    console.error('主流程出错:', err);
    process.exit(1);
  }
}

// 执行主函数
main();
EOL
          }

      - name: Run conversion script
        id: convert
        run: |
          # 列出 scripts 目录内容
          ls -la scripts/
          
          # 查看脚本内容的前几行
          head -n 20 scripts/convert.ts
          
          # 运行脚本
          ts-node scripts/convert.ts

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        run: |
          # 添加所有变更
          git add Loon/ Surge/
          
          # 检查是否有变更
          if git diff --staged --quiet; then
            echo "No changes detected"
            exit 0
          fi
          
          # 有变更时提交
          git commit -m "Auto convert scripts: $(date +'%Y-%m-%d %H:%M:%S')"
          
          # 拉取最新更改以避免冲突
          git pull --rebase origin main || {
            echo "处理可能的合并冲突"
            git checkout --ours Loon/ Surge/
            git add Loon/ Surge/
            git rebase --continue
          }
          
          # 推送变更
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}